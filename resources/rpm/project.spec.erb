%define debug_package %{nil}

<%- if @platform.is_cisco_wrlinux? -%>
# Our cisco-5/7 build platforms are missing the definition of
# __os_install_post, so we have to manually set it here. This
# then enables the brp strip scripts, which are needed to reduce
# the size of our agent packages for these platforms. This is
# necessary as some targets will fail to even install the package
# without stripped binaries because yum's package cache is kept
# on a partition with ~50MB of free space.
%global __os_install_post    \
    /usr/lib64/rpm/brp-compress \
    /usr/lib64/rpm/brp-strip %{__strip} \
    /usr/lib64/rpm/brp-strip-static-archive %{__strip} \
    /usr/lib64/rpm/brp-strip-comment-note %{__strip} %{__objdump} \
%{nil}
<%- elsif !@platform.is_aix? -%>
# enable more stripping. This was failing on cisco wrlinux and AIX. We may want
# to get this worked out eventually, but for now let's just skip these for
# those platforms
%global __debug_package %{nil}
# to resolve: "ERROR: No build ID note found"
%undefine _missing_build_ids_terminate_build

# Starting in Fedora 28 and RHEL 8, automatic shebang (#!) munging was added.
# We don't want this in our software and it will interfere with third-party
# dependencies that we don't control. See
# https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/message/2PD5RNJRKPN2DVTNGJSBHR5RUSVZSDZI/
# for more info.
%undefine __brp_mangle_shebangs

<% @package_overrides.each do |var| %>
<%= var %>
<% end -%>

<%- if @platform.is_el8? %>
# Build el-8 packages without build-id files to prevent collision
%define _build_id_links none
<% end -%>

# To avoid files installed but not packaged errors
%global __os_install_post %{__os_install_post} \
    rm -rf %{buildroot}/usr/lib/debug
<%- end -%>

# Turn off the brp-python-bytecompile script
%global __os_install_post %(echo '%{__os_install_post}' | <%= @platform.sed %> -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')
<% if @platform.is_cross_compiled_linux? -%>
# Disable brp-strip-static-archive, which on EL platforms causes
# cross-compiled static libs to end up with "no machine" as their
# architure, breaking builds:
%global __os_install_post %(echo '%{__os_install_post}' | <%= @platform.sed %> -e 's!/usr/lib[^[:space:]]*/brp-strip-static-archive[[:space:]].*$!!g')
<% end -%>

Name:           <%= @name %>
Version:        <%= @version %>
Release:        <%= @release %>%{?dist}
Summary:        <%= @description.lines.first.chomp %>
Vendor:         <%= vendor_name_only %>
License:        <%= @license %>
Group:          System Environment/Base
URL:            <%= @homepage %>

BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
<% if @noarch -%>
BuildArch:      noarch
<% end -%>

Source0:        %{name}-%{version}.tar.gz
Source1:        file-list-for-rpm

# Don't provide anything so the system doesn't use our packages to resolve deps
Autoprov: 0
Autoreq: 0
<%- get_requires.each do |requires| -%>
Requires:  <%= requires.requirement %><%= requires.version ? " #{requires.version}" : "" %>
<%- end -%>

# All rpm packages built by vanagon have the pre-/post-install script
# boilerplates (defined below). These require `mkdir` and `touch` but previously
# did not specify a dependency on these.
# In the future, we will supress pre/post scripts completely if there's nothing
# specified by the project or the components.
<%- if @platform.is_fedora? || (@platform.is_el? && @platform.os_version.to_i >= 9) -%>
Requires(pre): /usr/bin/mkdir
Requires(pre): /usr/bin/touch
Requires(post): /usr/bin/mkdir
Requires(post): /usr/bin/touch
<%- elsif !@platform.is_aix? -%>
Requires(pre): /bin/mkdir
Requires(pre): /bin/touch
Requires(post): /bin/mkdir
Requires(post): /bin/touch
<%- end -%>

<%- if has_services? -%>
  <%- if @platform.get_service_types.include?("systemd") -%>
    <%- if @platform.is_sles? -%>
BuildRequires:    systemd
%{?systemd_requires}
    <%- else -%>
BuildRequires:    systemd
Requires(post):   systemd
Requires(preun):  systemd
Requires(postun): systemd
    <%- end -%>
  <%- elsif @platform.get_service_types.include?("sysv") -%>
    <%- if @platform.is_sles? -%>
Requires: aaa_base
    <%- elsif @platform.is_linux? -%>
Requires: chkconfig
    <%- end -%>
  <%- end -%>
<%- end -%>

<%- get_replaces.each do |replace| -%>
Obsoletes: <%= replace.replacement %><%= replace.version ? " #{replace.version}" : "" %>
<%- end -%>

<%- get_conflicts.each do |conflict| -%>
Conflicts: <%= conflict.pkgname %><%= conflict.version ? " #{conflict.version}" : "" %>
<%- end -%>

<%- get_provides.each do |prov| -%>
Provides: <%= prov.provide %><%= prov.version ? " #{prov.version}" : "" %>
<%- end -%>

%description
<%= @description %>

Contains the following components:
<%= generate_bill_of_materials.join("\n") %>

%prep
%setup -q -n %{name}-%{version}

%build

%clean

%install
test -d /opt/freeware/bin && export PATH="/opt/freeware/bin:${PATH}"
rm -rf %{buildroot}
install -d %{buildroot}

# Copy each directory into place. Because empty directories won't make it into.
<%- get_directories.map {|d| d.path.sub(/^\//,'')}.each do |dir| -%>
  if [ -d <%= dir %> ]; then
    install -d %{buildroot}/<%= File.dirname(dir) %>
    cp -pr <%= dir %> %{buildroot}/<%= File.dirname(dir) %>
  else
    install -d %{buildroot}/<%= dir %>
  fi
<%- end -%>

# Copy each of the extra files into place
<%- (get_files + get_configfiles).map {|f| f.path.sub(/^\//,'')}.each do |file| -%>
  install -d %{buildroot}/<%= File.dirname(file) %>
  cp -Rp <%= file %> %{buildroot}/<%= File.dirname(file) %>
<%- end -%>

<%- if @platform.is_cisco_wrlinux? -%>
  # Generate a list of directories and append it to the file list. RPMv4
  # automatically does this implicitly, but RPMv5 is more strict and you
  # need to list the dirs for them to be packaged properly.
  <%- get_directories.map {|d| "%{buildroot}#{d.path}"}.each do |dir| -%>
    find <%= dir %> -type d | <%= @platform.sed %> -e "s#%{buildroot}##" | <%= @platform.sed %> -e 's/\(^.*\s.*$\)/"\1"/g' >> dir-list-rpm
  <%- end -%>
  cat dir-list-rpm | sort | uniq >> %{SOURCE1}
<%- end -%>

# Here we explicitly remove the directories and files that we list in the
# %files section separately because rpm3 on aix errors on duplicate files in
# the package.
<%- (get_directories + get_files + get_configfiles).map do |filething| -%>
  PATH=/opt/freeware/bin:$PATH <%= @platform.sed %> -i 's|^<%= filething.path.include?(" ") ? %Q["#{filething.path}"] : filething.path %>$||g' %{SOURCE1}
<%- end -%>

# Here we turn all dirs in the file-list into %dir entries to avoid duplicate files
if command -v perl; then
  perl -i -lne 'if ((-d $_) && !(-l $_)) { print "%dir $_" } else { print }' %{SOURCE1}
else
  while read entry; do
    if [ -n "$entry" -a -d "$entry" -a ! -L "$entry" ]; then
      <%= @platform.sed %> -i "\|^$entry\$|s|^|%dir |" %{SOURCE1}
    fi
  done < %{SOURCE1}
fi


%pre
<%- unless @platform.is_aix? || (@platform.is_el? && @platform.os_version.to_i == 4) -%>
# Save state so we know later if this is an upgrade or an install
mkdir -p %{_localstatedir}/lib/rpm-state/%{name}
if [ "$1" -eq 1 ] ; then
  touch %{_localstatedir}/lib/rpm-state/%{name}/install
fi
if [ "$1" -gt 1 ] ; then
  touch %{_localstatedir}/lib/rpm-state/%{name}/upgrade
fi
<%- end -%>

<%- if @user -%>
# Add our user and group
<%= @platform.add_group(@user) %>
<%= @platform.add_user(@user) %>
<%- end -%>

# Run preinstall scripts on install if defined
if [ "$1" -eq 1 ] ; then
  <%= get_preinstall_actions("install") %>
fi

# Run preinstall scripts on upgrade if defined
if [ "$1" -gt 1 ] ; then
  <%= get_preinstall_actions("upgrade") %>
fi

<%- if @platform.is_aix? -%>
    <%- get_services.each do |service| -%>
        # Stop service on upgrade so that it can be restarted at the end
        if [ "$1" -gt 1 ] ; then
            /usr/bin/stopsrc -s <%= service.name -%> > /dev/null 2>&1 || :
        fi
    <%- end -%>
<%- end -%>

<%- get_all_trigger_pkgs.each do |pkg| %>

%triggerin -- <%= pkg %>
# Run scripts on install if defined
[ $2 = 0 ] || exit 0
if [ "$1" -eq 1 ] ; then
  <%= get_install_trigger_scripts(pkg) %>
  : # end line
fi
elif ["$1" -gt 1 ] ;
  <%= get_upgrade_trigger_scripts(pkg) %>
  : # end line
fi
<% end -%>


%post
# Run post-transaction scripts on install if defined
if [ -e %{_localstatedir}/lib/rpm-state/%{name}/install ] ; then
  <%= get_postinstall_actions("install") %>
  rm %{_localstatedir}/lib/rpm-state/%{name}/install
fi

# Run post-transaction scripts on upgrade if defined
if [ -e %{_localstatedir}/lib/rpm-state/%{name}/upgrade ] ; then
  <%= get_postinstall_actions("upgrade") %>
  rm %{_localstatedir}/lib/rpm-state/%{name}/upgrade
fi
<%- get_services.each do |service| -%>
  # switch based on systemd vs systemv vs smf vs aix
  #
  <%- if @platform.get_service_types.include?("systemd") -%>
    <%- if @platform.is_sles? -%>
      %service_add_post <%= service.name %>.service
    <%- else -%>
      %systemd_post <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.get_service_types.include?("sysv") -%>
    chkconfig --add <%= service.name %> >/dev/null 2>&1 || :
  <%- elsif @platform.get_service_types.include?("aix") -%>
    if /usr/bin/lssrc -s <%= service.name -%> > /dev/null 2>&1; then
      /usr/bin/chssys -s <%= service.name -%> -p <%= service.service_command -%> -w 7 -S -n 15 -f 9 > /dev/null 2>&1 || :
    else
      /usr/bin/mkssys -p <%= service.service_command -%> -w 7 -S -n 15 -f 9 > /dev/null  2>&1 || :
    fi
    if /bin/grep -q "^<%= service.name -%>:2:once:startsrc$" /etc/inittab; then
    /usr/sbin/rmitab <%= service.name -%> > /dev/null 2>&1 || :
    fi
    /usr/sbin/mkitab "<%= service.name -%>:2:once:/usr/bin/startsrc -s <%= service.name -%>" > /dev/null 2>&1 || :
  <%- end -%>
<%- end -%>

%triggerpostun -- <%= @name %>
<%- if @platform.is_aix? || (@platform.is_el? && @platform.os_version.to_i == 4) -%>
  # old versions of vanagon generated an unconditional service stop in
  # the preun. This means that postinstall actions that mess with the
  # service need to be run AFTER that step. To do so, we can run them
  # in the "triggerpostun" when an upgrade is happening.

  # Run postinstall scripts on upgrade if defined
  if [ "$2" -gt 0 ] ; then
    <%= get_postinstall_actions("upgrade") %>
  fi
<%- end -%>


%postun
# Run post-uninstall scripts on upgrade if defined
if [ "$1" -eq 1 ] ; then
  <%= get_postremove_actions("upgrade") %>
fi

# Run post-uninstall scripts on removal if defined
if [ "$1" -eq 0 ] ; then
  <%= get_postremove_actions("removal") %>
fi

<%- get_services.each do |service| -%>
  # switch based on systemd vs systemv vs smf vs aix
  #
  <%- if @platform.get_service_types.include?("systemd") -%>
    <%- if @platform.is_sles? -%>
      %service_del_postun <%= service.name %>.service
    <%- else -%>
      %systemd_postun_with_restart <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.get_service_types.include?("sysv") -%>
    if [ "$1" -eq 1 ]; then
      /sbin/service <%= service.name %> condrestart || :
    fi
  <%- elsif @platform.get_service_types.include?("aix") -%>
    if  [ "$1" -eq 0 ]; then
      /usr/bin/rmssys -s <%= service.name -%> > /dev/null 2>&1 || :
      /usr/sbin/rmitab <%= service.name -%> > /dev/null 2>&1 || :
    fi
  <%- end -%>
<%- end -%>


%preun
# Run pre-uninstall scripts on upgrade if defined
if [ "$1" -eq 1 ] ; then
  <%= get_preremove_actions("upgrade") %>
fi

# Run pre-uninstall scripts on removal if defined
if [ "$1" -eq 0 ] ; then
  <%= get_preremove_actions("removal") %>
fi

<%- get_services.each do |service| -%>
  <%- if @platform.get_service_types.include?("systemd") -%>
    <%- if @platform.is_sles? -%>
      %service_del_preun <%= service.name %>.service
    <%- else -%>
      %systemd_preun <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.get_service_types.include?("sysv") -%>
    if [ "$1" -eq 0 ]; then
      /sbin/service <%= service.name %> stop >/dev/null 2>&1 || :
      chkconfig --del <%= service.name %> || :
    fi
  <%- elsif @platform.get_service_types.include?("aix") -%>
      # stop the service only on a real uninstall, not on upgrades
      if [ "$1" -eq 0 ] ; then
          /usr/bin/stopsrc -s <%= service.name -%> > /dev/null 2>&1 || :
      fi
  <%- end -%>
<%- end -%>


%files <%- unless get_directories.empty? -%>-f %{SOURCE1}<%- end -%>

<%- unless @bill_of_materials -%>
%doc bill-of-materials
<%- end -%>
%defattr(-, root, root, 0755)
<%- get_directories.each do |dir| -%>
%dir %attr(<%= dir.mode || "-" %>, <%= dir.owner || "-" %>, <%= dir.group || "-" %>) <%= dir.path %>
<%- end -%>
<%- get_configfiles.each do |configfile| -%>
%config(noreplace) %attr(<%= configfile.mode || "-" %>, <%= configfile.owner || "-" %>, <%= configfile.group || "-" %>) <%= configfile.path %>
<%- end -%>
<%- get_files.each do |file| -%>
%attr(<%= file.mode || "-" %>, <%= file.owner || "-" %>, <%= file.group || "-" %>) <%= file.path %>
<%- end -%>
<%- get_rpm_ghost_files.each do |file| -%>
%ghost <%= file.path %>
<%- end -%>

%changelog
* <%= Time.now.strftime("%a %b %d %Y") %> <%= @vendor %> -  <%= @version %>-<%= @release %>
- Build for <%= @version %>-<%= @release %>
