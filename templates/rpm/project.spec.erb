%global debug_package %{nil}

# Turn off the brp-python-bytecompile script
%global __os_install_post %(echo '%{__os_install_post}' | sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')
#

Name:           <%= @name %>
Version:        <%= @version %>
Release:        <%= @release %>%{?dist}
Summary:        <%= @description.lines.first.chomp %>
Vendor:         <%= @vendor.match(/^(.*) <.*>$/)[1] %>
License:        <%= @license %>
Group:          System Environment/Base
URL:            <%= @homepage %>

BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
<% if @noarch -%>
BuildArch:      noarch
<% end -%>

Source0:        %{name}-%{version}.tar.gz
Source1:        file-list-for-rpm

# Don't provide anything so the system doesn't use our packages to resolve deps
Autoprov: 0
Autoreq: 0
<%- get_requires.each do |requires| -%>
Requires:  <%= requires %>
<%- end -%>
<%- if has_services? -%>
  <%- if @platform.servicetype == "systemd" -%>
    <%- if @platform.is_sles? -%>
BuildRequires:    systemd
%{?systemd_requires}
    <%- else -%>
BuildRequires:    systemd
Requires(post):   systemd
Requires(preun):  systemd
Requires(postun): systemd
    <%- end -%>
  <%- elsif @platform.servicetype == "sysv" -%>
    <%- if @platform.is_sles? -%>
Requires: aaa_base
    <%- elsif @platform.is_linux? -%>
Requires: chkconfig
    <%- end -%>
  <%- end -%>
<%- end -%>

<%- get_replaces.each do |replace| -%>
Conflicts: <%= replace.replacement %><%= replace.version ? " < #{replace.version}" : "" %>
Obsoletes: <%= replace.replacement %><%= replace.version ? " < #{replace.version}" : "" %>
<%- end -%>

<%- get_provides.each do |prov| -%>
Provides: <%= prov.provide %><%= prov.version ? " >= #{prov.version}" : "" %>
<%- end -%>

%description
<%= @description %>

Contains the following components:
<%= generate_bill_of_materials.join("\n") %>

%prep
%setup -q -n %{name}-%{version}

%build

%clean

%install
test -d /opt/freeware/bin && export PATH="/opt/freeware/bin:${PATH}"
rm -rf %{buildroot}
install -d %{buildroot}

# Copy each directory into place. Because empty directories won't make it into.
<%- get_directories.map {|d| d.path.sub(/^\//,'')}.each do |dir| -%>
  if [ -d <%= dir %> ]; then
    install -d %{buildroot}/<%= File.dirname(dir) %>
    cp -pr <%= dir %> %{buildroot}/<%= File.dirname(dir) %>
  else
    install -d %{buildroot}/<%= dir %>
  fi
<%- end -%>

# Copy each of the extra files into place
<%- (get_files + get_configfiles).map {|f| f.path.sub(/^\//,'')}.each do |file| -%>
  install -d %{buildroot}/<%= File.dirname(file) %>
  cp -p <%= file %> %{buildroot}/<%= File.dirname(file) %>
<%- end -%>

<%- if @platform.is_cisco_wrlinux? || @platform.is_huaweios? -%>
  # Generate a list of directories and append it to the file list. RPMv4
  # automatically does this implicitly, but RPMv5 is more strict and you
  # need to list the dirs for them to be packaged properly.
  <%- get_directories.map {|d| "%{buildroot}#{d.path}"}.each do |dir| -%>
    find <%= dir %> -type d | sed -e "s#%{buildroot}##" | sed -e 's/\(^.*\s.*$\)/"\1"/g' >> dir-list-rpm
  <%- end -%>
  cat dir-list-rpm | sort | uniq >> %{SOURCE1}
<%- end -%>

# Here we explicitly remove the directories and files that we list in the
# %files section separately because rpm3 on aix errors on duplicate files in
# the package.
<%- (get_directories + get_files + get_configfiles).map do |filething| -%>
  PATH=/opt/freeware/bin:$PATH sed -i 's|^<%= filething.path.include?(" ") ? %Q["#{filething.path}"] : filething.path %>$||g' %{SOURCE1}
<%- end -%>

# Here we turn all dirs in the file-list into %dir entries to avoid duplicate files
for entry in `cat %{SOURCE1}`; do
  if [ -n "$entry" -a -d "$entry" ]; then
    PATH=/opt/freeware/bin:$PATH sed -i "s|^\($entry\)\$|%dir \1|g" %{SOURCE1}
  fi
done

%pre -p /bin/bash
# Save state so we know later if this is an upgrade or an install
mkdir -p %{_localstatedir}/lib/rpm-state/%{name}
if [ $1 -eq 1 ] ; then
  touch %{_localstatedir}/lib/rpm-state/%{name}/install
fi
if [ $1 -eq 2 ] ; then
  touch %{_localstatedir}/lib/rpm-state/%{name}/upgrade
fi

<%- if @user -%>
# Add our user and group
<%= @platform.add_group(@user) %>
<%= @platform.add_user(@user) %>
<%- end -%>

# Run preinstall scripts on install if defined
<%- scripts = get_preinstall_actions("install") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 1 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>

# Run preinstall scripts on upgrade if defined
<%- scripts = get_preinstall_actions("upgrade") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 2 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>



%post
<%- if @platform.is_aix? || (@platform.is_el? && @platform.os_version.to_i == 4) -%>
  ## EL-4 and AIX RPM don't have %posttrans, so we'll put them here
  # Run postinstall scripts on install if defined
  <%- scripts = get_postinstall_actions("install") -%>
  <%- unless scripts.empty? -%>
if [ $1 -eq 1 ] ; then
  <%= scripts.join("\n") %>
fi
  <%- end -%>

  # Run postinstall scripts on upgrade if defined
  <%- scripts = get_postinstall_actions("upgrade") -%>
  <%- unless scripts.empty? -%>
if [ $1 -eq 2 ] ; then
  <%= scripts.join("\n") %>
fi
  <%- end -%>

<%- end -%>
<%- get_services.each do |service| -%>
  # switch based on systemd vs systemv vs smf vs aix
  #
  <%- if @platform.servicetype == "systemd" -%>
    <%- if @platform.is_sles? -%>
      %service_add_post <%= service.name %>.service
    <%- else -%>
      %systemd_post <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.servicetype == "sysv" -%>
    chkconfig --add <%= service.name %> >/dev/null 2>&1 || :
  <%- elsif @platform.servicetype == "aix" -%>
    /usr/bin/mkssys -p <%= service.service_command -%> -w 7 -S -n 15 -f 9 > /dev/null  2>&1 || :
    if /bin/grep -q "^<%= service.name -%>:2:once:startsrc$" /etc/inittab; then
    /usr/sbin/rmitab <%= service.name -%> > /dev/null 2>&1 || :
    fi
    /usr/sbin/mkitab "<%= service.name -%>:2:once:/usr/bin/startsrc -s <%= service.name -%>" > /dev/null 2>&1 || :
  <%- end -%>
<%- end -%>

%postun
# Run post-uninstall scripts on upgrade if defined
<%- scripts = get_postremove_actions("upgrade") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 1 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>

# Run post-uninstall scripts on removal if defined
<%- scripts = get_postremove_actions("removal") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 0 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>


<%- get_services.each do |service| -%>
  # switch based on systemd vs systemv vs smf vs aix
  #
  <%- if @platform.servicetype == "systemd" -%>
    <%- if @platform.is_sles? -%>
      %service_del_postun <%= service.name %>.service
    <%- else -%>
      %systemd_postun_with_restart <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.servicetype == "sysv" -%>
    if [ $1 -ge 1 ]; then
      /sbin/service <%= service.name %> condrestart || :
    fi
  <%- elsif @platform.servicetype == "aix" -%>
    if  [ $1 -eq 0 ]; then
      /usr/bin/rmssys -s <%= service.name -%> > /dev/null 2>&1 || :
      /usr/sbin/rmitab <%= service.name -%> > /dev/null 2>&1 || :
    fi
  <%- end -%>
<%- end -%>

%preun
# Run pre-uninstall scripts on upgrade if defined
<%- scripts = get_preremove_actions("upgrade") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 1 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>

# Run pre-uninstall scripts on removal if defined
<%- scripts = get_preremove_actions("removal") -%>
<%- unless scripts.empty? -%>
if [ $1 -eq 0 ] ; then
  <%= scripts.join("\n") %>
fi
<%- end -%>


<%- get_services.each do |service| -%>
  <%- if @platform.servicetype == "systemd" -%>
    <%- if @platform.is_sles? -%>
      %service_del_preun <%= service.name %>.service
    <%- else -%>
      %systemd_preun <%= service.name %>.service
    <%- end -%>
  <%- elsif @platform.servicetype == "sysv" -%>
    if [ $1 = 0 ]; then
      /sbin/service <%= service.name %> stop >/dev/null 2>&1 || :
      chkconfig --del <%= service.name %> || :
    fi
  <%- elsif @platform.servicetype == "aix" -%>
    /usr/bin/stopsrc -s <%= service.name -%> > /dev/null 2>&1 || :
  <%- end -%>
<%- end -%>

<%- unless @platform.is_aix? || (@platform.is_el? && @platform.os_version.to_i == 4) -%>
%posttrans
# Run post-transaction scripts on install if defined
  <%- scripts = get_postinstall_actions("install") -%>
  <%- unless scripts.empty? -%>
if [ -e %{_localstatedir}/lib/rpm-state/%{name}/install ] ; then
  <%= scripts.join("\n") %>
  rm %{_localstatedir}/lib/rpm-state/%{name}/install
fi
  <%- end -%>

# Run post-transaction scripts on upgrade if defined
  <%- scripts = get_postinstall_actions("upgrade") -%>
  <%- unless scripts.empty? -%>
if [ -e %{_localstatedir}/lib/rpm-state/%{name}/upgrade ] ; then
  <%= scripts.join("\n") %>
  rm %{_localstatedir}/lib/rpm-state/%{name}/upgrade
fi
  <%- end -%>
<%- end -%>

%files -f %{SOURCE1}
%doc bill-of-materials
%defattr(-, root, root, 0755)
<%- get_directories.each do |dir| -%>
%dir %attr(<%= dir.mode || "-" %>, <%= dir.owner || "-" %>, <%= dir.group || "-" %>) <%= dir.path %>
<%- end -%>
<%- get_configfiles.each do |configfile| -%>
%config(noreplace) %attr(<%= configfile.mode || "-" %>, <%= configfile.owner || "-" %>, <%= configfile.group || "-" %>) <%= configfile.path %>
<%- end -%>
<%- get_files.each do |file| -%>
%attr(<%= file.mode || "-" %>, <%= file.owner || "-" %>, <%= file.group || "-" %>) <%= file.path %>
<%- end -%>

%changelog
* <%= Time.now.strftime("%a %b %d %Y") %> <%= @vendor %> -  <%= @version %>-<%= @release %>
- Build for <%= @version %>-<%= @release %>
